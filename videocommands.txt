#bash commands to create bash and manifests
MP4Box -dash 4000 -frag 4000 -rap -segment-name comethou come.mp4#video come.mp4#audio
MP4Box -dash 8000 -frag 8000 -rap -segment-name cometnew come.mp4#video come.mp4#audio

#
https://popsql.com/learn-sql/postgresql/how-to-query-a-json-column-in-postgresql



#If video in hvace format to adjust video

x264 --output comethou.264 --fps 29.97 --preset slow --bitrate 987 --vbv-maxrate 1122 --vbv-bufsize 2244 --min-keyint 48 --keyint 48 --scenecut 0 --no-scenecut --pass 1 --video-filter "resize:width=1280,height=720" come.mp4


#snap install go
sudo snap install go --channel=1.16/stable --classic


# export container IP as follows for container in container image filter

export CONTAINER_IP=$(hostname -I | awk '{print $1}')


// go test -v ./tests/... # this is the test command
// gedit ~/.bashrc
// export PATH=$PATH:$(go env GOPATH)/bin
// docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management
// docker run -d -it --rm --name runrabbit -p 5672:5672 -p 15672:15672 bluerabbit
// docker run -it --rm --name runrabbit -p7000:7000 -p9000:9000 -p15433:15433 -p5433:5433 -p9042:9042 -v ~/yb_data:/home/bushu/Documents/goland/goblue-back/go_bluev3 blueyugabyte
// docker run -p 5432:5432 bluegres
// docker run --name bluepg -p 82:80 -e PGADMIN_DEFAULT_EMAIL=blue@yahoo.com -e PGADMIN_DEFAULT_PASSWORD=pass123 -d dpage/pgadmin4

// export PATH=$(go env GOPATH)/bin
// export GOPATH=$(go env GOPATH)/bin
// export GOMODCACHE=$(go env GOCACHE)


// protoc --go_out=. --go_opt=paths=source_relative     --go-grpc_out=. --go-grpc_opt=paths=source_relative     bluerpc.proto
//  this is the one that is working
// protoc --go_out=. --go_opt=paths=source_relative     --go-grpc_out=. --go-grpc_opt=paths=source_relative    bluerpc/bluerpc.proto

db.DryRun = true
db.Find(&model)
db.Statement.SQL.String()
db.DryRun = false

// PG dump command sample
pg_dump -h 192.168.49.2 -p 30432 -U blueuser -d bluev5 --format plain --verbose --file bluev5dump.sql

// Kubernetes
kubectl get services
sudo rm -rf /home/bushu/.minikube/cache/images/amd64/blue-rabbit-v2
 2013  minikube stop
 2014  docker -t blue-data -f postgres.Dockerfile .
 2015  docker build -t blue-data -f postgres.Dockerfile .
 2016  minikube stop
 2017  minikube start
 2018  minikube ssh docker image ls
 2019  minikube ssh docker rmi -f 52c27a1ca233
 2020  minikube ssh docker rmi 52c27a1ca233
 2021  minikube ssh docker rmi --force 52c27a1ca233
 2022  docker rmi --help
 2023  minikube ssh docker rm --force 52c27a1ca233
 2024  minikube ssh docker image  rmi --force 52c27a1ca233
 2025  docker image ls
 2026  docker image rmi 4b7e1a1d5669
 2027  docker image rmi -f 4b7e1a1d5669
 2028  minikube ssh docker image  ls
 2029  minikube ssh docker image rmi -f 1ebff0f9671b
 2030  minikube ssh "docker image rmi -f 1ebff0f9671b"
 2031  minikube ssh "docker image rmi -f 52c27a1ca233"
 2032  minikube ssh "docker image rmi -f 83eced5f84f5"
 2033  minikube ssh docker image  ls
 2034  docker image ls
 2035  minikube load image blue-admin-v1
 2036  docker push $(minikube ip):5000/blue-admin-v1
 2037  docker tag blue-admin-v1 $(minikube ip):5000/blue-admin-v1
 2038  docker push $(minikube ip):5000/blue-admin-v1
 2039  minikube ssh docker image  ls
 2040  docker image ls
 2041  minikube ssh "docker build -t blue-rabbit-v2 -f rabbit.Dockerfile ."
 2042  minikube ssh docker image  ls
 2043  docker image ls
 2044  minikube load blue-rabbit-v2
 2045  minikube image load blue-rabbit-v2
 2046  eval $(minikube docker-env)
 2047  minikube ssh docker image  ls
 2048  kubectl --version
 2049  kubectl --help
 2050  kubectl version
 2051  kubectl apply -f k8
 2052  kubectl delete all --all
 2053  kubectl apply -f k8
 2054  minikube ip
 2055  kubectl get services
 2056* kubectl get de
 2057  kubectl get pod
 2058  kubectl --help
 2059  kubectl delete all --all


eval $(minikube docker-env)
eval $(minikube -p minikube docker-env)



kubectl exec -it blue-back-fiber-5dd5f44958-bhxxv  -- /bin/bash

go test -v ./tests

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/haproxy.pem -out /etc/ssl/certs/haproxy.pem

sudo service haproxy restart

sudo cat /etc/ssl/certs/haproxy.crt /etc/ssl/private/haproxy.key > /etc/ssl/certs/haproxy.pem

sudo apt-get clean
sudo apt-get autoremove --purge
sudo apt-get remove python3.9
sudo apt-get autoremove

haproxy -c -f /etc/haproxy/haproxy.cfg


 echo -n "admin" | base64 // base64 encoded password generation on terminal

 haproxy.org/load-balance: "roundrobin"


 base64 -w 0 haproxy.pem

 kubectl get secret haproxy-secrets -o jsonpath='{.data.haproxy\.pem}' | base64 --decode
kubectl create secret tls haproxy-tls-secret --cert=server.pem --key=server-key.pem
 minikube start --addons=ingress-haproxy

helm install haproxy haproxytech/kubernetes-ingress
helm search repo haproxy
helm install haproxy haproxytech/kubernetes-ingress

helm repo add haproxy-ingress https://haproxy-ingress.github.io/charts
helm repo update
helm install haproxy-ingress haproxy-ingress/haproxy-ingress
kubectl --namespace default get services haproxy-ingress -o wide -w

kubectl get pods -n default --show-labels
kubectl get deployments --all-namespaces

helm install haproxy-kubernetes-ingress haproxytech/kubernetes-ingress   --create-namespace   --namespace haproxy-controller
kubectl get pods --namespace haproxy-controller

helm install haproxy-kubernetes-ingress haproxytech/kubernetes-ingress   --create-namespace   --namespace haproxy-controller > haproxy-kubernetes-ingress.yaml
helm uninstall haproxy-kubernetes-ingress -n haproxy-controller

helm get manifest haproxy-kubernetes-ingress -n haproxy-controller > haproxy-kubernetes-ingress.yaml


docker image prune --all

kubectl rollout restart deployment <deployment_name>
kubectl get networkpolicies --all-namespaces

kubectl delete clusterrole haproxy-ingress
kubectl delete clusterrolebinding haproxy-ingress
helm install haproxy-ingress haproxy-ingress/haproxy-ingress  --create-namespace --namespace ingress-controller  --version 0.14.6  -f k8/haproxy-ingress-values.yaml


kubectl --namespace default create ingress echoserver \
  --class=haproxy \
  --rule="echoserver.local/*=echoserver:8080,tls"


  kubectl get ingress <ingress-name> -o yaml > ingress.yaml

kubectl get mutatingwebhookconfigurations,validatingwebhookconfigurations

kubectl delete validatingwebhookconfigurations ingress-nginx-admission
//#########################################################################3
with prometheus graphana dashboard
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

helm install prometheus prometheus-community/kube-prometheus-stack\
  --create-namespace --namespace monitoring\
  -f k8/kube-prom-operator.yaml

helm upgrade haproxy-ingress haproxy-ingress/haproxy-ingress\
  --create-namespace --namespace ingress-controller\
  -f k8/haproxy-metrics.yaml

kubectl --namespace ingress-controller get services haproxy-ingress -o wide -w


kubectl --namespace monitoring get pods -l "release=prometheus"
kubectl get ep prometheus-grafana -n monitoring

kubectl get serviceaccount -n <grafana-namespace>

//###########################################################################

// get process running on port :8080
sudo lsof -i :8080

//##############################################
//creating cluster image for testing 
kubectl run -i --tty --rm debug --image=alpine:latest --restart=Never -- /bin/sh
apk update && apk add bind-tools
nslookup haproxy-ingress-metrics
dig haproxy-ingress-metrics


//#################################################