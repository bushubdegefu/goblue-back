// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bluerpc/bluerpc.proto

package bluerpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlueService_GetSalt_FullMethodName = "/BlueService/GetSalt"
)

// BlueServiceClient is the client API for BlueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueServiceClient interface {
	GetSalt(ctx context.Context, in *BlueAppID, opts ...grpc.CallOption) (*BlueSalt, error)
}

type blueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueServiceClient(cc grpc.ClientConnInterface) BlueServiceClient {
	return &blueServiceClient{cc}
}

func (c *blueServiceClient) GetSalt(ctx context.Context, in *BlueAppID, opts ...grpc.CallOption) (*BlueSalt, error) {
	out := new(BlueSalt)
	err := c.cc.Invoke(ctx, BlueService_GetSalt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueServiceServer is the server API for BlueService service.
// All implementations must embed UnimplementedBlueServiceServer
// for forward compatibility
type BlueServiceServer interface {
	GetSalt(context.Context, *BlueAppID) (*BlueSalt, error)
	mustEmbedUnimplementedBlueServiceServer()
}

// UnimplementedBlueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlueServiceServer struct {
}

func (UnimplementedBlueServiceServer) GetSalt(context.Context, *BlueAppID) (*BlueSalt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalt not implemented")
}
func (UnimplementedBlueServiceServer) mustEmbedUnimplementedBlueServiceServer() {}

// UnsafeBlueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueServiceServer will
// result in compilation errors.
type UnsafeBlueServiceServer interface {
	mustEmbedUnimplementedBlueServiceServer()
}

func RegisterBlueServiceServer(s grpc.ServiceRegistrar, srv BlueServiceServer) {
	s.RegisterService(&BlueService_ServiceDesc, srv)
}

func _BlueService_GetSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlueAppID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueServiceServer).GetSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlueService_GetSalt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueServiceServer).GetSalt(ctx, req.(*BlueAppID))
	}
	return interceptor(ctx, in, info, handler)
}

// BlueService_ServiceDesc is the grpc.ServiceDesc for BlueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlueService",
	HandlerType: (*BlueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalt",
			Handler:    _BlueService_GetSalt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluerpc/bluerpc.proto",
}
